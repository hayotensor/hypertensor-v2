
//! Autogenerated weights for `pallet_network`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-11-19, STEPS: `5`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Bob`, CPU: `11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/solochain-template-node
// benchmark
// pallet
// --chain=dev
// --wasm-execution=compiled
// --pallet=pallet_network
// --extrinsic=*
// --steps=5
// --repeat=2
// --output=pallets/network/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_network`.
pub trait WeightInfo {
	fn add_subnet_node() -> Weight;
	fn remove_subnet_node() -> Weight;
	fn add_to_stake() -> Weight;
	fn remove_stake() -> Weight;
	fn add_to_delegate_stake() -> Weight;
	fn transfer_delegate_stake() -> Weight;
	fn remove_delegate_stake() -> Weight;
	fn claim_delegate_stake_unbondings() -> Weight;
	fn increase_delegate_stake() -> Weight;
	fn validate() -> Weight;
	fn attest() -> Weight;
	fn propose() -> Weight;
	fn cancel_proposal() -> Weight;
	fn challenge_proposal() -> Weight;
	fn vote() -> Weight;
	fn finalize_proposal() -> Weight;
	fn on_initialize_reward_subnets() -> Weight;
	fn on_initialize_reward_subnets_subnet_nodes_removed_linear(x: u32, y: u32, ) -> Weight;
	fn on_initialize_reward_subnets_linear(x: u32, y: u32, ) -> Weight;
	fn on_initialize_do_choose_validator_and_accountants() -> Weight;
	fn on_initialize() -> Weight;
}

/// Weights for `pallet_network` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeAccount` (r:1 w:1)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1 w:1)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetAccount` (r:1 w:1)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:1 w:1)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnets` (r:1 w:1)
	/// Proof: `Network::AccountSubnets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_subnet_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `659`
		//  Estimated: `4124`
		// Minimum execution time: 80_809_000 picoseconds.
		Weight::from_parts(89_648_000, 4124)
			.saturating_add(T::DbWeight::get().reads(17_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetAccount` (r:1 w:1)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnets` (r:1 w:1)
	/// Proof: `Network::AccountSubnets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:5 w:5)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeAccount` (r:0 w:1)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:0 w:1)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_subnet_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1097`
		//  Estimated: `14462`
		// Minimum execution time: 70_329_000 picoseconds.
		Weight::from_parts(79_287_000, 14462)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1 w:1)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_to_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1315`
		//  Estimated: `4780`
		// Minimum execution time: 67_930_000 picoseconds.
		Weight::from_parts(78_162_000, 4780)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Network::SubnetAccount` (r:1 w:0)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinRequiredUnstakeEpochs` (r:1 w:0)
	/// Proof: `Network::MinRequiredUnstakeEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1 w:1)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn remove_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1385`
		//  Estimated: `4850`
		// Minimum execution time: 65_870_000 picoseconds.
		Weight::from_parts(66_477_000, 4850)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::AccountSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxDelegateStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxDelegateStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_to_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `445`
		//  Estimated: `3910`
		// Minimum execution time: 58_816_000 picoseconds.
		Weight::from_parts(60_968_000, 3910)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetDelegateStakeShares` (r:2 w:2)
	/// Proof: `Network::AccountSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:2 w:2)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:2 w:2)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxDelegateStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxDelegateStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn transfer_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `647`
		//  Estimated: `6587`
		// Minimum execution time: 56_082_000 picoseconds.
		Weight::from_parts(59_739_000, 6587)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `Network::AccountSubnetDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::AccountSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::DelegateStakeUnbondingLedger` (r:1 w:1)
	/// Proof: `Network::DelegateStakeUnbondingLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `493`
		//  Estimated: `3958`
		// Minimum execution time: 39_857_000 picoseconds.
		Weight::from_parts(44_246_000, 3958)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Network::DelegateStakeUnbondingLedger` (r:1 w:1)
	/// Proof: `Network::DelegateStakeUnbondingLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn claim_delegate_stake_unbondings() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `563`
		//  Estimated: `4028`
		// Minimum execution time: 26_626_000 picoseconds.
		Weight::from_parts(30_646_000, 4028)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn increase_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `796`
		//  Estimated: `4261`
		// Minimum execution time: 35_954_000 picoseconds.
		Weight::from_parts(41_523_000, 4261)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Network::SubnetRewardsValidator` (r:1 w:0)
	/// Proof: `Network::SubnetRewardsValidator` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:2 w:0)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn validate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `19792`
		//  Estimated: `25732`
		// Minimum execution time: 67_367_000 picoseconds.
		Weight::from_parts(72_504_000, 25732)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::SubnetNodesClasses` (r:1 w:0)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn attest() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `26075`
		//  Estimated: `29540`
		// Minimum execution time: 54_772_000 picoseconds.
		Weight::from_parts(81_971_000, 29540)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:1 w:0)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeAccount` (r:1 w:0)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ChallengePeriod` (r:1 w:0)
	/// Proof: `Network::ChallengePeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::VotingPeriod` (r:1 w:0)
	/// Proof: `Network::VotingPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ProposalBidAmount` (r:1 w:0)
	/// Proof: `Network::ProposalBidAmount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::ProposalsCount` (r:1 w:1)
	/// Proof: `Network::ProposalsCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn propose() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `22254`
		//  Estimated: `25719`
		// Minimum execution time: 118_602_000 picoseconds.
		Weight::from_parts(123_245_000, 25719)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn cancel_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5076`
		//  Estimated: `8541`
		// Minimum execution time: 46_465_000 picoseconds.
		Weight::from_parts(54_678_000, 8541)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ChallengePeriod` (r:1 w:0)
	/// Proof: `Network::ChallengePeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn challenge_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5356`
		//  Estimated: `8821`
		// Minimum execution time: 59_678_000 picoseconds.
		Weight::from_parts(63_365_000, 8821)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::VotingPeriod` (r:1 w:0)
	/// Proof: `Network::VotingPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5216`
		//  Estimated: `8681`
		// Minimum execution time: 40_222_000 picoseconds.
		Weight::from_parts(45_623_000, 8681)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::VotingPeriod` (r:1 w:0)
	/// Proof: `Network::VotingPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ProposalQuorum` (r:1 w:0)
	/// Proof: `Network::ProposalQuorum` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ProposalConsensusThreshold` (r:1 w:0)
	/// Proof: `Network::ProposalConsensusThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetAccount` (r:1 w:1)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnets` (r:1 w:1)
	/// Proof: `Network::AccountSubnets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:5 w:5)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:95 w:95)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::SubnetNodeAccount` (r:0 w:1)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:0 w:1)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn finalize_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `50828`
		//  Estimated: `248275`
		// Minimum execution time: 1_280_132_000 picoseconds.
		Weight::from_parts(1_366_809_000, 248275)
			.saturating_add(T::DbWeight::get().reads(109_u64))
			.saturating_add(T::DbWeight::get().writes(108_u64))
	}
	/// Storage: `Network::BaseRewardPerMB` (r:1 w:0)
	/// Proof: `Network::BaseRewardPerMB` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinVastMajorityAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinVastMajorityAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodePenalties` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodePenalties` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetPenaltyCount` (r:1 w:0)
	/// Proof: `Network::MaxSubnetPenaltyCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::NodeAttestationRemovalThreshold` (r:1 w:0)
	/// Proof: `Network::NodeAttestationRemovalThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::DelegateStakeRewardsPercentage` (r:1 w:0)
	/// Proof: `Network::DelegateStakeRewardsPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:64 w:0)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:320 w:320)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:6208 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:6080 w:6080)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseReward` (r:1 w:0)
	/// Proof: `Network::BaseReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:6080 w:6080)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:95 w:95)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:64 w:64)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:64 w:64)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetPenaltyCount` (r:64 w:64)
	/// Proof: `Network::SubnetPenaltyCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeClassEpochs` (r:4 w:0)
	/// Proof: `Network::SubnetNodeClassEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxAccountPenaltyCount` (r:1 w:0)
	/// Proof: `Network::MaxAccountPenaltyCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountPenaltyCount` (r:96 w:0)
	/// Proof: `Network::AccountPenaltyCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn on_initialize_reward_subnets() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2778353`
		//  Estimated: `18144143`
		// Minimum execution time: 223_671_480_000 picoseconds.
		Weight::from_parts(236_746_677_000, 18144143)
			.saturating_add(T::DbWeight::get().reads(19214_u64))
			.saturating_add(T::DbWeight::get().writes(12768_u64))
	}
	/// Storage: `Network::BaseRewardPerMB` (r:1 w:0)
	/// Proof: `Network::BaseRewardPerMB` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinVastMajorityAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinVastMajorityAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodePenalties` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodePenalties` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetPenaltyCount` (r:1 w:0)
	/// Proof: `Network::MaxSubnetPenaltyCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::NodeAttestationRemovalThreshold` (r:1 w:0)
	/// Proof: `Network::NodeAttestationRemovalThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::DelegateStakeRewardsPercentage` (r:1 w:0)
	/// Proof: `Network::DelegateStakeRewardsPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:64 w:0)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:320 w:320)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:6208 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:6080 w:6080)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseReward` (r:1 w:0)
	/// Proof: `Network::BaseReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:6080 w:6080)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:95 w:95)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:64 w:64)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:64 w:64)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetPenaltyCount` (r:64 w:64)
	/// Proof: `Network::SubnetPenaltyCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeClassEpochs` (r:4 w:0)
	/// Proof: `Network::SubnetNodeClassEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxAccountPenaltyCount` (r:1 w:0)
	/// Proof: `Network::MaxAccountPenaltyCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountPenaltyCount` (r:96 w:0)
	/// Proof: `Network::AccountPenaltyCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 64]`.
	/// The range of component `y` is `[5, 96]`.
	fn on_initialize_reward_subnets_subnet_nodes_removed_linear(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (43208 ±0) + y * (28773 ±0)`
		//  Estimated: `296645 + x * (101718 ±4_039) + y * (59478 ±2_680)`
		// Minimum execution time: 3_614_589_000 picoseconds.
		Weight::from_parts(3_614_589_000, 296645)
			// Standard Error: 340_190_874
			.saturating_add(Weight::from_parts(1_255_249_494, 0).saturating_mul(x.into()))
			// Standard Error: 225_719_386
			.saturating_add(Weight::from_parts(766_531_875, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(503_u64))
			.saturating_add(T::DbWeight::get().reads((109_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().reads((62_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(294_u64))
			.saturating_add(T::DbWeight::get().writes((73_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes((41_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 101718).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 59478).saturating_mul(y.into()))
	}
	/// Storage: `Network::BaseRewardPerMB` (r:1 w:0)
	/// Proof: `Network::BaseRewardPerMB` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinVastMajorityAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinVastMajorityAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodePenalties` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodePenalties` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetPenaltyCount` (r:1 w:0)
	/// Proof: `Network::MaxSubnetPenaltyCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::NodeAttestationRemovalThreshold` (r:1 w:0)
	/// Proof: `Network::NodeAttestationRemovalThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::DelegateStakeRewardsPercentage` (r:1 w:0)
	/// Proof: `Network::DelegateStakeRewardsPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:64 w:0)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:320 w:320)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:6208 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:6080 w:6080)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseReward` (r:1 w:0)
	/// Proof: `Network::BaseReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:6080 w:6080)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:95 w:95)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:64 w:64)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:64 w:64)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetPenaltyCount` (r:64 w:64)
	/// Proof: `Network::SubnetPenaltyCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeClassEpochs` (r:4 w:0)
	/// Proof: `Network::SubnetNodeClassEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxAccountPenaltyCount` (r:1 w:0)
	/// Proof: `Network::MaxAccountPenaltyCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountPenaltyCount` (r:96 w:0)
	/// Proof: `Network::AccountPenaltyCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 64]`.
	/// The range of component `y` is `[5, 96]`.
	fn on_initialize_reward_subnets_linear(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (43208 ±0) + y * (28773 ±0)`
		//  Estimated: `296645 + x * (101718 ±26_274) + y * (59478 ±17_433)`
		// Minimum execution time: 3_542_563_000 picoseconds.
		Weight::from_parts(3_542_563_000, 296645)
			// Standard Error: 337_033_678
			.saturating_add(Weight::from_parts(1_237_360_124, 0).saturating_mul(x.into()))
			// Standard Error: 223_624_561
			.saturating_add(Weight::from_parts(739_848_112, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(503_u64))
			.saturating_add(T::DbWeight::get().reads((109_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().reads((62_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(294_u64))
			.saturating_add(T::DbWeight::get().writes((73_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes((41_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 101718).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 59478).saturating_mul(y.into()))
	}
	/// Storage: `Network::MinRequiredSubnetConsensusSubmitEpochs` (r:1 w:0)
	/// Proof: `Network::MinRequiredSubnetConsensusSubmitEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TargetAccountantsLength` (r:1 w:0)
	/// Proof: `Network::TargetAccountantsLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:128 w:0)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `InsecureRandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `InsecureRandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `Network::CurrentAccountants` (r:0 w:64)
	/// Proof: `Network::CurrentAccountants` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsValidator` (r:0 w:64)
	/// Proof: `Network::SubnetRewardsValidator` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn on_initialize_do_choose_validator_and_accountants() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1241061`
		//  Estimated: `1558851`
		// Minimum execution time: 2_701_379_000 picoseconds.
		Weight::from_parts(2_722_990_000, 1558851)
			.saturating_add(T::DbWeight::get().reads(196_u64))
			.saturating_add(T::DbWeight::get().writes(128_u64))
	}
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 855_000 picoseconds.
		Weight::from_parts(1_030_000, 0)
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeAccount` (r:1 w:1)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1 w:1)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetAccount` (r:1 w:1)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:1 w:1)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnets` (r:1 w:1)
	/// Proof: `Network::AccountSubnets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_subnet_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `659`
		//  Estimated: `4124`
		// Minimum execution time: 80_809_000 picoseconds.
		Weight::from_parts(89_648_000, 4124)
			.saturating_add(RocksDbWeight::get().reads(17_u64))
			.saturating_add(RocksDbWeight::get().writes(12_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetAccount` (r:1 w:1)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnets` (r:1 w:1)
	/// Proof: `Network::AccountSubnets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:5 w:5)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeAccount` (r:0 w:1)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:0 w:1)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_subnet_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1097`
		//  Estimated: `14462`
		// Minimum execution time: 70_329_000 picoseconds.
		Weight::from_parts(79_287_000, 14462)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(12_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1 w:1)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_to_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1315`
		//  Estimated: `4780`
		// Minimum execution time: 67_930_000 picoseconds.
		Weight::from_parts(78_162_000, 4780)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Network::SubnetAccount` (r:1 w:0)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinRequiredUnstakeEpochs` (r:1 w:0)
	/// Proof: `Network::MinRequiredUnstakeEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1 w:1)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn remove_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1385`
		//  Estimated: `4850`
		// Minimum execution time: 65_870_000 picoseconds.
		Weight::from_parts(66_477_000, 4850)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::AccountSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxDelegateStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxDelegateStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_to_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `445`
		//  Estimated: `3910`
		// Minimum execution time: 58_816_000 picoseconds.
		Weight::from_parts(60_968_000, 3910)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetDelegateStakeShares` (r:2 w:2)
	/// Proof: `Network::AccountSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:2 w:2)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:2 w:2)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxDelegateStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxDelegateStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn transfer_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `647`
		//  Estimated: `6587`
		// Minimum execution time: 56_082_000 picoseconds.
		Weight::from_parts(59_739_000, 6587)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `Network::AccountSubnetDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::AccountSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::DelegateStakeUnbondingLedger` (r:1 w:1)
	/// Proof: `Network::DelegateStakeUnbondingLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `493`
		//  Estimated: `3958`
		// Minimum execution time: 39_857_000 picoseconds.
		Weight::from_parts(44_246_000, 3958)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Network::DelegateStakeUnbondingLedger` (r:1 w:1)
	/// Proof: `Network::DelegateStakeUnbondingLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn claim_delegate_stake_unbondings() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `563`
		//  Estimated: `4028`
		// Minimum execution time: 26_626_000 picoseconds.
		Weight::from_parts(30_646_000, 4028)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn increase_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `796`
		//  Estimated: `4261`
		// Minimum execution time: 35_954_000 picoseconds.
		Weight::from_parts(41_523_000, 4261)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Network::SubnetRewardsValidator` (r:1 w:0)
	/// Proof: `Network::SubnetRewardsValidator` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:2 w:0)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn validate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `19792`
		//  Estimated: `25732`
		// Minimum execution time: 67_367_000 picoseconds.
		Weight::from_parts(72_504_000, 25732)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::SubnetNodesClasses` (r:1 w:0)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn attest() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `26075`
		//  Estimated: `29540`
		// Minimum execution time: 54_772_000 picoseconds.
		Weight::from_parts(81_971_000, 29540)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:1 w:0)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeAccount` (r:1 w:0)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ChallengePeriod` (r:1 w:0)
	/// Proof: `Network::ChallengePeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::VotingPeriod` (r:1 w:0)
	/// Proof: `Network::VotingPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ProposalBidAmount` (r:1 w:0)
	/// Proof: `Network::ProposalBidAmount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::ProposalsCount` (r:1 w:1)
	/// Proof: `Network::ProposalsCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn propose() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `22254`
		//  Estimated: `25719`
		// Minimum execution time: 118_602_000 picoseconds.
		Weight::from_parts(123_245_000, 25719)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn cancel_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5076`
		//  Estimated: `8541`
		// Minimum execution time: 46_465_000 picoseconds.
		Weight::from_parts(54_678_000, 8541)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ChallengePeriod` (r:1 w:0)
	/// Proof: `Network::ChallengePeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn challenge_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5356`
		//  Estimated: `8821`
		// Minimum execution time: 59_678_000 picoseconds.
		Weight::from_parts(63_365_000, 8821)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::VotingPeriod` (r:1 w:0)
	/// Proof: `Network::VotingPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5216`
		//  Estimated: `8681`
		// Minimum execution time: 40_222_000 picoseconds.
		Weight::from_parts(45_623_000, 8681)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::VotingPeriod` (r:1 w:0)
	/// Proof: `Network::VotingPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ProposalQuorum` (r:1 w:0)
	/// Proof: `Network::ProposalQuorum` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ProposalConsensusThreshold` (r:1 w:0)
	/// Proof: `Network::ProposalConsensusThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetAccount` (r:1 w:1)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnets` (r:1 w:1)
	/// Proof: `Network::AccountSubnets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:5 w:5)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:95 w:95)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::SubnetNodeAccount` (r:0 w:1)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:0 w:1)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn finalize_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `50828`
		//  Estimated: `248275`
		// Minimum execution time: 1_280_132_000 picoseconds.
		Weight::from_parts(1_366_809_000, 248275)
			.saturating_add(RocksDbWeight::get().reads(109_u64))
			.saturating_add(RocksDbWeight::get().writes(108_u64))
	}
	/// Storage: `Network::BaseRewardPerMB` (r:1 w:0)
	/// Proof: `Network::BaseRewardPerMB` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinVastMajorityAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinVastMajorityAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodePenalties` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodePenalties` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetPenaltyCount` (r:1 w:0)
	/// Proof: `Network::MaxSubnetPenaltyCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::NodeAttestationRemovalThreshold` (r:1 w:0)
	/// Proof: `Network::NodeAttestationRemovalThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::DelegateStakeRewardsPercentage` (r:1 w:0)
	/// Proof: `Network::DelegateStakeRewardsPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:64 w:0)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:320 w:320)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:6208 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:6080 w:6080)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseReward` (r:1 w:0)
	/// Proof: `Network::BaseReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:6080 w:6080)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:95 w:95)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:64 w:64)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:64 w:64)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetPenaltyCount` (r:64 w:64)
	/// Proof: `Network::SubnetPenaltyCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeClassEpochs` (r:4 w:0)
	/// Proof: `Network::SubnetNodeClassEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxAccountPenaltyCount` (r:1 w:0)
	/// Proof: `Network::MaxAccountPenaltyCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountPenaltyCount` (r:96 w:0)
	/// Proof: `Network::AccountPenaltyCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn on_initialize_reward_subnets() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2778353`
		//  Estimated: `18144143`
		// Minimum execution time: 223_671_480_000 picoseconds.
		Weight::from_parts(236_746_677_000, 18144143)
			.saturating_add(RocksDbWeight::get().reads(19214_u64))
			.saturating_add(RocksDbWeight::get().writes(12768_u64))
	}
	/// Storage: `Network::BaseRewardPerMB` (r:1 w:0)
	/// Proof: `Network::BaseRewardPerMB` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinVastMajorityAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinVastMajorityAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodePenalties` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodePenalties` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetPenaltyCount` (r:1 w:0)
	/// Proof: `Network::MaxSubnetPenaltyCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::NodeAttestationRemovalThreshold` (r:1 w:0)
	/// Proof: `Network::NodeAttestationRemovalThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::DelegateStakeRewardsPercentage` (r:1 w:0)
	/// Proof: `Network::DelegateStakeRewardsPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:64 w:0)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:320 w:320)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:6208 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:6080 w:6080)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseReward` (r:1 w:0)
	/// Proof: `Network::BaseReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:6080 w:6080)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:95 w:95)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:64 w:64)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:64 w:64)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetPenaltyCount` (r:64 w:64)
	/// Proof: `Network::SubnetPenaltyCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeClassEpochs` (r:4 w:0)
	/// Proof: `Network::SubnetNodeClassEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxAccountPenaltyCount` (r:1 w:0)
	/// Proof: `Network::MaxAccountPenaltyCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountPenaltyCount` (r:96 w:0)
	/// Proof: `Network::AccountPenaltyCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 64]`.
	/// The range of component `y` is `[5, 96]`.
	fn on_initialize_reward_subnets_subnet_nodes_removed_linear(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (43208 ±0) + y * (28773 ±0)`
		//  Estimated: `296645 + x * (101718 ±4_039) + y * (59478 ±2_680)`
		// Minimum execution time: 3_614_589_000 picoseconds.
		Weight::from_parts(3_614_589_000, 296645)
			// Standard Error: 340_190_874
			.saturating_add(Weight::from_parts(1_255_249_494, 0).saturating_mul(x.into()))
			// Standard Error: 225_719_386
			.saturating_add(Weight::from_parts(766_531_875, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(503_u64))
			.saturating_add(RocksDbWeight::get().reads((109_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().reads((62_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().writes(294_u64))
			.saturating_add(RocksDbWeight::get().writes((73_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes((41_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 101718).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 59478).saturating_mul(y.into()))
	}
	/// Storage: `Network::BaseRewardPerMB` (r:1 w:0)
	/// Proof: `Network::BaseRewardPerMB` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinVastMajorityAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinVastMajorityAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodePenalties` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodePenalties` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetPenaltyCount` (r:1 w:0)
	/// Proof: `Network::MaxSubnetPenaltyCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::NodeAttestationRemovalThreshold` (r:1 w:0)
	/// Proof: `Network::NodeAttestationRemovalThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::DelegateStakeRewardsPercentage` (r:1 w:0)
	/// Proof: `Network::DelegateStakeRewardsPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:64 w:0)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:320 w:320)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:6208 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:6080 w:6080)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseReward` (r:1 w:0)
	/// Proof: `Network::BaseReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:6080 w:6080)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:95 w:95)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:64 w:64)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:64 w:64)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetPenaltyCount` (r:64 w:64)
	/// Proof: `Network::SubnetPenaltyCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeClassEpochs` (r:4 w:0)
	/// Proof: `Network::SubnetNodeClassEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxAccountPenaltyCount` (r:1 w:0)
	/// Proof: `Network::MaxAccountPenaltyCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountPenaltyCount` (r:96 w:0)
	/// Proof: `Network::AccountPenaltyCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 64]`.
	/// The range of component `y` is `[5, 96]`.
	fn on_initialize_reward_subnets_linear(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (43208 ±0) + y * (28773 ±0)`
		//  Estimated: `296645 + x * (101718 ±26_274) + y * (59478 ±17_433)`
		// Minimum execution time: 3_542_563_000 picoseconds.
		Weight::from_parts(3_542_563_000, 296645)
			// Standard Error: 337_033_678
			.saturating_add(Weight::from_parts(1_237_360_124, 0).saturating_mul(x.into()))
			// Standard Error: 223_624_561
			.saturating_add(Weight::from_parts(739_848_112, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(503_u64))
			.saturating_add(RocksDbWeight::get().reads((109_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().reads((62_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().writes(294_u64))
			.saturating_add(RocksDbWeight::get().writes((73_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes((41_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 101718).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 59478).saturating_mul(y.into()))
	}
	/// Storage: `Network::MinRequiredSubnetConsensusSubmitEpochs` (r:1 w:0)
	/// Proof: `Network::MinRequiredSubnetConsensusSubmitEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TargetAccountantsLength` (r:1 w:0)
	/// Proof: `Network::TargetAccountantsLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:128 w:0)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `InsecureRandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `InsecureRandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `Network::CurrentAccountants` (r:0 w:64)
	/// Proof: `Network::CurrentAccountants` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsValidator` (r:0 w:64)
	/// Proof: `Network::SubnetRewardsValidator` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn on_initialize_do_choose_validator_and_accountants() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1241061`
		//  Estimated: `1558851`
		// Minimum execution time: 2_701_379_000 picoseconds.
		Weight::from_parts(2_722_990_000, 1558851)
			.saturating_add(RocksDbWeight::get().reads(196_u64))
			.saturating_add(RocksDbWeight::get().writes(128_u64))
	}
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 855_000 picoseconds.
		Weight::from_parts(1_030_000, 0)
	}
}