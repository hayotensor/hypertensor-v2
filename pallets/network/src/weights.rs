
//! Autogenerated weights for `pallet_network`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-11-22, STEPS: `5`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Bob`, CPU: `11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/solochain-template-node
// benchmark
// pallet
// --chain=dev
// --wasm-execution=compiled
// --pallet=pallet_network
// --extrinsic=*
// --steps=5
// --repeat=2
// --output=pallets/network/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_network`.
pub trait WeightInfo {
	fn add_subnet_node() -> Weight;
	fn remove_subnet_node() -> Weight;
	fn add_to_stake() -> Weight;
	fn remove_stake() -> Weight;
	fn add_to_delegate_stake() -> Weight;
	fn transfer_delegate_stake() -> Weight;
	fn remove_delegate_stake() -> Weight;
	fn claim_delegate_stake_unbondings() -> Weight;
	fn increase_delegate_stake() -> Weight;
	fn validate() -> Weight;
	fn attest() -> Weight;
	fn propose() -> Weight;
	fn cancel_proposal() -> Weight;
	fn challenge_proposal() -> Weight;
	fn vote() -> Weight;
	fn finalize_proposal() -> Weight;
	fn reward_subnet() -> Weight;
	fn on_initialize_do_choose_validator_and_accountants() -> Weight;
	fn on_initialize() -> Weight;
}

/// Weights for `pallet_network` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeAccount` (r:1 w:1)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1 w:1)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetAccount` (r:1 w:1)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:1 w:1)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnets` (r:1 w:1)
	/// Proof: `Network::AccountSubnets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_subnet_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `659`
		//  Estimated: `4124`
		// Minimum execution time: 83_697_000 picoseconds.
		Weight::from_parts(92_118_000, 4124)
			.saturating_add(T::DbWeight::get().reads(17_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetAccount` (r:1 w:1)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnets` (r:1 w:1)
	/// Proof: `Network::AccountSubnets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:5 w:5)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeAccount` (r:0 w:1)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:0 w:1)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_subnet_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1097`
		//  Estimated: `14462`
		// Minimum execution time: 74_863_000 picoseconds.
		Weight::from_parts(84_847_000, 14462)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1 w:1)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_to_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1315`
		//  Estimated: `4780`
		// Minimum execution time: 64_132_000 picoseconds.
		Weight::from_parts(67_772_000, 4780)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1 w:1)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetStakeUnbondingLedger` (r:1 w:1)
	/// Proof: `Network::SubnetStakeUnbondingLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `959`
		//  Estimated: `4424`
		// Minimum execution time: 47_837_000 picoseconds.
		Weight::from_parts(48_941_000, 4424)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::AccountSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxDelegateStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxDelegateStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_to_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `445`
		//  Estimated: `3910`
		// Minimum execution time: 53_648_000 picoseconds.
		Weight::from_parts(72_348_000, 3910)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetDelegateStakeShares` (r:2 w:2)
	/// Proof: `Network::AccountSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:2 w:2)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:2 w:2)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxDelegateStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxDelegateStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn transfer_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `647`
		//  Estimated: `6587`
		// Minimum execution time: 52_374_000 picoseconds.
		Weight::from_parts(56_080_000, 6587)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `Network::AccountSubnetDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::AccountSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::DelegateStakeUnbondingLedger` (r:1 w:1)
	/// Proof: `Network::DelegateStakeUnbondingLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `493`
		//  Estimated: `3958`
		// Minimum execution time: 37_165_000 picoseconds.
		Weight::from_parts(39_487_000, 3958)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Network::DelegateStakeUnbondingLedger` (r:1 w:1)
	/// Proof: `Network::DelegateStakeUnbondingLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn claim_delegate_stake_unbondings() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `563`
		//  Estimated: `4028`
		// Minimum execution time: 26_394_000 picoseconds.
		Weight::from_parts(28_237_000, 4028)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn increase_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `796`
		//  Estimated: `4261`
		// Minimum execution time: 31_899_000 picoseconds.
		Weight::from_parts(33_927_000, 4261)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Network::SubnetRewardsValidator` (r:1 w:0)
	/// Proof: `Network::SubnetRewardsValidator` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:2 w:0)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn validate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `205402`
		//  Estimated: `211342`
		// Minimum execution time: 414_521_000 picoseconds.
		Weight::from_parts(541_174_000, 211342)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::SubnetNodesClasses` (r:1 w:0)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn attest() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `272956`
		//  Estimated: `276421`
		// Minimum execution time: 362_777_000 picoseconds.
		Weight::from_parts(605_682_000, 276421)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:1 w:0)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeAccount` (r:1 w:0)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ChallengePeriod` (r:1 w:0)
	/// Proof: `Network::ChallengePeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::VotingPeriod` (r:1 w:0)
	/// Proof: `Network::VotingPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ProposalBidAmount` (r:1 w:0)
	/// Proof: `Network::ProposalBidAmount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::ProposalsCount` (r:1 w:1)
	/// Proof: `Network::ProposalsCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn propose() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `208435`
		//  Estimated: `211900`
		// Minimum execution time: 323_259_000 picoseconds.
		Weight::from_parts(331_693_000, 211900)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn cancel_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42400`
		//  Estimated: `45865`
		// Minimum execution time: 164_979_000 picoseconds.
		Weight::from_parts(169_524_000, 45865)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ChallengePeriod` (r:1 w:0)
	/// Proof: `Network::ChallengePeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn challenge_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42747`
		//  Estimated: `46212`
		// Minimum execution time: 230_696_000 picoseconds.
		Weight::from_parts(248_205_000, 46212)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::VotingPeriod` (r:1 w:0)
	/// Proof: `Network::VotingPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42768`
		//  Estimated: `46233`
		// Minimum execution time: 167_326_000 picoseconds.
		Weight::from_parts(169_518_000, 46233)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::VotingPeriod` (r:1 w:0)
	/// Proof: `Network::VotingPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ProposalQuorum` (r:1 w:0)
	/// Proof: `Network::ProposalQuorum` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ProposalConsensusThreshold` (r:1 w:0)
	/// Proof: `Network::ProposalConsensusThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetAccount` (r:1 w:1)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnets` (r:1 w:1)
	/// Proof: `Network::AccountSubnets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:5 w:5)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1023 w:1023)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::SubnetNodeAccount` (r:0 w:1)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:0 w:1)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn finalize_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `470074`
		//  Estimated: `2663859`
		// Minimum execution time: 13_834_344_000 picoseconds.
		Weight::from_parts(23_428_933_000, 2663859)
			.saturating_add(T::DbWeight::get().reads(1037_u64))
			.saturating_add(T::DbWeight::get().writes(1036_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseRewardPerMB` (r:1 w:0)
	/// Proof: `Network::BaseRewardPerMB` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinVastMajorityAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinVastMajorityAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodePenalties` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodePenalties` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::NodeAttestationRemovalThreshold` (r:1 w:0)
	/// Proof: `Network::NodeAttestationRemovalThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::DelegateStakeRewardsPercentage` (r:1 w:0)
	/// Proof: `Network::DelegateStakeRewardsPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetPenaltyCount` (r:1 w:0)
	/// Proof: `Network::MaxSubnetPenaltyCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetPenaltyCount` (r:1 w:1)
	/// Proof: `Network::SubnetPenaltyCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:1 w:0)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1025 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:1023 w:1023)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseReward` (r:1 w:0)
	/// Proof: `Network::BaseReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1023 w:1023)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1023 w:1023)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn reward_subnet() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `587020`
		//  Estimated: `3124885`
		// Minimum execution time: 31_502_751_000 picoseconds.
		Weight::from_parts(33_001_442_000, 3124885)
			.saturating_add(T::DbWeight::get().reads(4109_u64))
			.saturating_add(T::DbWeight::get().writes(3074_u64))
	}
	/// Storage: `Network::MinRequiredSubnetConsensusSubmitEpochs` (r:1 w:0)
	/// Proof: `Network::MinRequiredSubnetConsensusSubmitEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TargetAccountantsLength` (r:1 w:0)
	/// Proof: `Network::TargetAccountantsLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:128 w:0)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `InsecureRandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `InsecureRandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `Network::CurrentAccountants` (r:0 w:64)
	/// Proof: `Network::CurrentAccountants` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsValidator` (r:0 w:64)
	/// Proof: `Network::SubnetRewardsValidator` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn on_initialize_do_choose_validator_and_accountants() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `13120437`
		//  Estimated: `13438227`
		// Minimum execution time: 10_729_276_000 picoseconds.
		Weight::from_parts(12_251_915_000, 13438227)
			.saturating_add(T::DbWeight::get().reads(196_u64))
			.saturating_add(T::DbWeight::get().writes(128_u64))
	}
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 920_000 picoseconds.
		Weight::from_parts(1_337_000, 0)
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeAccount` (r:1 w:1)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1 w:1)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetAccount` (r:1 w:1)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:1 w:1)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnets` (r:1 w:1)
	/// Proof: `Network::AccountSubnets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_subnet_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `659`
		//  Estimated: `4124`
		// Minimum execution time: 83_697_000 picoseconds.
		Weight::from_parts(92_118_000, 4124)
			.saturating_add(RocksDbWeight::get().reads(17_u64))
			.saturating_add(RocksDbWeight::get().writes(12_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetAccount` (r:1 w:1)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnets` (r:1 w:1)
	/// Proof: `Network::AccountSubnets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:5 w:5)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeAccount` (r:0 w:1)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:0 w:1)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_subnet_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1097`
		//  Estimated: `14462`
		// Minimum execution time: 74_863_000 picoseconds.
		Weight::from_parts(84_847_000, 14462)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(12_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1 w:1)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_to_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1315`
		//  Estimated: `4780`
		// Minimum execution time: 64_132_000 picoseconds.
		Weight::from_parts(67_772_000, 4780)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1 w:1)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetStakeUnbondingLedger` (r:1 w:1)
	/// Proof: `Network::SubnetStakeUnbondingLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `959`
		//  Estimated: `4424`
		// Minimum execution time: 47_837_000 picoseconds.
		Weight::from_parts(48_941_000, 4424)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::AccountSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxDelegateStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxDelegateStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_to_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `445`
		//  Estimated: `3910`
		// Minimum execution time: 53_648_000 picoseconds.
		Weight::from_parts(72_348_000, 3910)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetDelegateStakeShares` (r:2 w:2)
	/// Proof: `Network::AccountSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:2 w:2)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:2 w:2)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxDelegateStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxDelegateStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn transfer_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `647`
		//  Estimated: `6587`
		// Minimum execution time: 52_374_000 picoseconds.
		Weight::from_parts(56_080_000, 6587)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `Network::AccountSubnetDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::AccountSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::DelegateStakeUnbondingLedger` (r:1 w:1)
	/// Proof: `Network::DelegateStakeUnbondingLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `493`
		//  Estimated: `3958`
		// Minimum execution time: 37_165_000 picoseconds.
		Weight::from_parts(39_487_000, 3958)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Network::DelegateStakeUnbondingLedger` (r:1 w:1)
	/// Proof: `Network::DelegateStakeUnbondingLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn claim_delegate_stake_unbondings() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `563`
		//  Estimated: `4028`
		// Minimum execution time: 26_394_000 picoseconds.
		Weight::from_parts(28_237_000, 4028)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn increase_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `796`
		//  Estimated: `4261`
		// Minimum execution time: 31_899_000 picoseconds.
		Weight::from_parts(33_927_000, 4261)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Network::SubnetRewardsValidator` (r:1 w:0)
	/// Proof: `Network::SubnetRewardsValidator` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:2 w:0)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn validate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `205402`
		//  Estimated: `211342`
		// Minimum execution time: 414_521_000 picoseconds.
		Weight::from_parts(541_174_000, 211342)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::SubnetNodesClasses` (r:1 w:0)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn attest() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `272956`
		//  Estimated: `276421`
		// Minimum execution time: 362_777_000 picoseconds.
		Weight::from_parts(605_682_000, 276421)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:1 w:0)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeAccount` (r:1 w:0)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ChallengePeriod` (r:1 w:0)
	/// Proof: `Network::ChallengePeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::VotingPeriod` (r:1 w:0)
	/// Proof: `Network::VotingPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ProposalBidAmount` (r:1 w:0)
	/// Proof: `Network::ProposalBidAmount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::ProposalsCount` (r:1 w:1)
	/// Proof: `Network::ProposalsCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn propose() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `208435`
		//  Estimated: `211900`
		// Minimum execution time: 323_259_000 picoseconds.
		Weight::from_parts(331_693_000, 211900)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn cancel_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42400`
		//  Estimated: `45865`
		// Minimum execution time: 164_979_000 picoseconds.
		Weight::from_parts(169_524_000, 45865)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ChallengePeriod` (r:1 w:0)
	/// Proof: `Network::ChallengePeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn challenge_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42747`
		//  Estimated: `46212`
		// Minimum execution time: 230_696_000 picoseconds.
		Weight::from_parts(248_205_000, 46212)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::VotingPeriod` (r:1 w:0)
	/// Proof: `Network::VotingPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42768`
		//  Estimated: `46233`
		// Minimum execution time: 167_326_000 picoseconds.
		Weight::from_parts(169_518_000, 46233)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::Proposals` (r:1 w:1)
	/// Proof: `Network::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::VotingPeriod` (r:1 w:0)
	/// Proof: `Network::VotingPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ProposalQuorum` (r:1 w:0)
	/// Proof: `Network::ProposalQuorum` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ProposalConsensusThreshold` (r:1 w:0)
	/// Proof: `Network::ProposalConsensusThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetAccount` (r:1 w:1)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnets` (r:1 w:1)
	/// Proof: `Network::AccountSubnets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:5 w:5)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1023 w:1023)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::SubnetNodeAccount` (r:0 w:1)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:0 w:1)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn finalize_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `470074`
		//  Estimated: `2663859`
		// Minimum execution time: 13_834_344_000 picoseconds.
		Weight::from_parts(23_428_933_000, 2663859)
			.saturating_add(RocksDbWeight::get().reads(1037_u64))
			.saturating_add(RocksDbWeight::get().writes(1036_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseRewardPerMB` (r:1 w:0)
	/// Proof: `Network::BaseRewardPerMB` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinVastMajorityAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinVastMajorityAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodePenalties` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodePenalties` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::NodeAttestationRemovalThreshold` (r:1 w:0)
	/// Proof: `Network::NodeAttestationRemovalThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::DelegateStakeRewardsPercentage` (r:1 w:0)
	/// Proof: `Network::DelegateStakeRewardsPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetPenaltyCount` (r:1 w:0)
	/// Proof: `Network::MaxSubnetPenaltyCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetPenaltyCount` (r:1 w:1)
	/// Proof: `Network::SubnetPenaltyCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetRewardsSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:1 w:0)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1025 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:1023 w:1023)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseReward` (r:1 w:0)
	/// Proof: `Network::BaseReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1023 w:1023)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1023 w:1023)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn reward_subnet() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `587020`
		//  Estimated: `3124885`
		// Minimum execution time: 31_502_751_000 picoseconds.
		Weight::from_parts(33_001_442_000, 3124885)
			.saturating_add(RocksDbWeight::get().reads(4109_u64))
			.saturating_add(RocksDbWeight::get().writes(3074_u64))
	}
	/// Storage: `Network::MinRequiredSubnetConsensusSubmitEpochs` (r:1 w:0)
	/// Proof: `Network::MinRequiredSubnetConsensusSubmitEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TargetAccountantsLength` (r:1 w:0)
	/// Proof: `Network::TargetAccountantsLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:128 w:0)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `InsecureRandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `InsecureRandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `Network::CurrentAccountants` (r:0 w:64)
	/// Proof: `Network::CurrentAccountants` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRewardsValidator` (r:0 w:64)
	/// Proof: `Network::SubnetRewardsValidator` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn on_initialize_do_choose_validator_and_accountants() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `13120437`
		//  Estimated: `13438227`
		// Minimum execution time: 10_729_276_000 picoseconds.
		Weight::from_parts(12_251_915_000, 13438227)
			.saturating_add(RocksDbWeight::get().reads(196_u64))
			.saturating_add(RocksDbWeight::get().writes(128_u64))
	}
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 920_000 picoseconds.
		Weight::from_parts(1_337_000, 0)
	}
}